horizon:
  buildTask:
    image:
      gitStep: horizoncd/kaniko-bash:v0.0.2
      compileStep: horizoncd/kaniko-bash:v0.0.2
      imageStep: horizoncd/kaniko-bash:v0.0.3
    timeout:
      gitStep: 5m
      compileStep:
      imageStep: 60m
  deployTask:
    image:
      deployStep: horizoncd/kaniko-bash:v0.0.2
    timeout:
      deployStep: 5m
    curlDeploy:
      connectTime: 5
      maxTime: 10
      retry: 2
    horizonApiUrl: http://horizon-core.horizoncd.svc.cluster.local
  pipelineRun:
    podTemplate: {}
  ingress:
    hosts: []
  script:
    git: |
      #!/bin/bash
      set -e
      export SOURCE_DIR="/workspace/git-source"
      export GIT_TOKENS_DIR="/workspace/git-token"
      export GIT_REPOSITORY_URL="$(params.gitRepositoryUrl)"
      export GIT_COMMIT="$(params.gitCommit)"
      export GIT_PULL_URL=""

      # config git ssh
      rm -rf /root/.ssh && ln -s /tekton/home/.ssh /root
      if [ -f "/root/.ssh/config" ]; then
        echo -e 'Host *\n    StrictHostKeyChecking no' >> /root/.ssh/config
      fi

      # check https url and match token
      retrieve_pull_url() {
        cd "$GIT_TOKENS_DIR"
        URLs=$(yq '.[].url' git-tokens)
        URLs=($URLs)
        TOKENs=$(yq '.[].token' git-tokens)
        TOKENs=($TOKENs)

        for i in "${!URLs[@]}"
        do
          if [[ "$GIT_REPOSITORY_URL" =~ "${URLs[$i]}" ]]
          then
            GIT_PULL_URL="https://oauth2:${TOKENs[$i]}@${GIT_REPOSITORY_URL#https://}"
            break
          fi
        done
      } && retrieve_pull_url
      [[ -z "$GIT_PULL_URL" ]] && GIT_PULL_URL="$GIT_REPOSITORY_URL"

      # pull code
      git clone "$GIT_PULL_URL" "$SOURCE_DIR" && {
        cd "$SOURCE_DIR"
        git checkout "$GIT_COMMIT"
        echo "Successfully cloned with commitID: '$GIT_COMMIT'"
      } || exit 1
      # pull submodule
      git submodule update --init --recursive || exit 1
    compile: |
      #!/bin/bash
      set -e
      export GIT_SUBFOLDER="$(params.gitSubfolder)"
      export PIPELINE_JSON_BLOB='$(params.pipelineJSONBlob)'
      export DOCKERFILE_BUILD="dockerfile"
      export BUILD_CATEGORY="$(jq -r '.buildType//empty'<<<"$PIPELINE_JSON_BLOB")"
      export DOCKERFILE="$(jq -r '.dockerfile.content//empty'<<<"$PIPELINE_JSON_BLOB")"
      export DOCKERFILE_PATH="$(jq -r '.dockerfile.path//empty'<<<"$PIPELINE_JSON_BLOB")"

      build_type(){
        local BUILD_TYPE=""
        if [[ "$BUILD_CATEGORY" == "$DOCKERFILE_BUILD" ]]
        then
          [[ -z "$BUILD_TYPE" ]] && [[ ! -z "$DOCKERFILE" ]] && BUILD_TYPE="dockerfileContent"
          [[ -z "$BUILD_TYPE" ]] && [[ ! -z "$DOCKERFILE_PATH" ]] && BUILD_TYPE="dockerfilePath"
        fi
        [[ -z "$BUILD_TYPE" ]] && echo "build type is invalid!" >&2 && return 1
        echo "BUILD_TYPE: ${BUILD_TYPE}" >&2
        echo "$BUILD_TYPE"
      }

      prepare_dockerfile(){
        [[ "$BUILD_TYPE" == "dockerfileContent" ]] && {
          cat >Dockerfile<<<$(echo "$DOCKERFILE")
        }

        [[ "$BUILD_TYPE" == "dockerfilePath" ]] && {
          local DOCKERFILE_ABSOLUTE_PATH="$PWD/${DOCKERFILE_PATH#/}"
          [[ -f "$DOCKERFILE_ABSOLUTE_PATH" ]] || {
            echo "dockerfile:$DOCKERFILE_PATH is not exists!"; return 1
          }
        }

        echo -e "\nDocker Context:"
        ls -al

        [[ "$BUILD_TYPE" == "dockerfilePath" ]] && {
          echo -e "\n$DOCKERFILE_PATH:"
          cat "$DOCKERFILE_ABSOLUTE_PATH"
        } || {
          echo -e "\nDockerfile:"
          cat Dockerfile
        }
      }

      record_build_info(){
        local BUILD_TYPE="$1"
        cat >$(workspaces.buildinfo.path)/build-type<<<"$BUILD_TYPE"
      }

      main(){
        # enter git subfolder
        SUBFOLDER=${GIT_SUBFOLDER#/}
        [[ -z "$SUBFOLDER" ]] || {
          cd "$SUBFOLDER"
        }

        # get build type
        BUILD_TYPE=$(build_type)

        # prepare dockerfile
        prepare_dockerfile "$BUILD_TYPE"

        # record build type
        record_build_info "$BUILD_TYPE"
      } && main
    image: |
      #!/bin/bash
      set -e

      export BUILD_TYPE="$(cat $(workspaces.buildinfo.path)/build-type)"

      export APPLICATION="$(params.application)"
      export CLUSTER="$(params.cluster)"
      export ENVIRONMENT="$(params.environment)"
      export PIPELINE_JSON_BLOB='$(params.pipelineJSONBlob)'
      export DOCKERFILE_PATH="$(jq -r '.dockerfile.path//empty'<<<"$PIPELINE_JSON_BLOB")"
      export DOCKER_IMAGE="$(params.imageURL)"
      export EXTRA_BUILD_ARGS="$(jq -r '.buildArgs//[] | map("--build-arg " + .name + "=" + .value) | join(" ")' <<< "$PIPELINE_JSON_BLOB")"
      export SUBFOLDER=$(params.gitSubfolder)
      export CONTEXT="/workspace/git-source/${SUBFOLDER#/}"


      [[ "$BUILD_TYPE" != "dockerfilePath" ]] && export DOCKERFILE_PATH="Dockerfile"
      export DOCKERFILE_PATH="${CONTEXT%/}/${DOCKERFILE_PATH#/}"

      echo -e "\nstart building: $DOCKER_IMAGE"

      CMD_KANIKO="time /kaniko/executor --skip-tls-verify --context=${CONTEXT} \
          --snapshotMode=redo \
          --use-new-run \
          --dockerfile="$DOCKERFILE_PATH" \
          --build-arg APPLICATION="$APPLICATION" \
          --build-arg CLUSTER="$CLUSTER" \
          --build-arg ENVIRONMENT="$ENVIRONMENT" \
          "$EXTRA_BUILD_ARGS" \
          --destination=$DOCKER_IMAGE"

      eval "$CMD_KANIKO" && exit 0
      exit 1
    deploy: |
      #!/bin/bash
      set -eE

      export TOKEN="$(params.token)"
      export APPLICATION="$(params.application)"
      export CLUSTER="$(params.cluster)"
      export CLUSTER_ID="$(params.clusterID)"
      export ENVIRONMENT="$(params.environment)"
      export PIPELINERUN_ID="$(params.pipelinerunID)"
      export IMAGE_URL="$(params.imageURL)"
      export REQUEST_ID="$(params.requestID)"
      export GIT_REPOSITORY_URL="$(params.gitRepositoryUrl)"
      export GIT_COMMIT="$(params.gitCommit)"
      export GIT_BRANCH="$(params.gitBranch)"
      export GIT_TAG="$(params.gitTag)"
      export DEPLOY_RESULT="deploy.res"
      export STATUS_RESULT="status.res"

      log() {
        local LEVEL="${1^^}" && shift
        local DATE_TIME="$(TZ=Asia/Shanghai date +"%Y-%m-%d %H:%M:%S")"
        echo "[$DATE_TIME] $LEVEL - $*" >&2
      }

      err_handler(){
        [[ -f "$STATUS_RESULT" ]] && {
          log INFO "status response: $(cat "$STATUS_RESULT")"; return
        }
        [[ -f "$DEPLOY_RESULT" ]] && {
          log INFO "deploy response: $(cat "$DEPLOY_RESULT")"; return
        }
      } && trap err_handler ERR

      is_json(){
        local INPUT="$1"
        [[ ! -z "$(jq -c "objects"<<<"$INPUT")" ]] && return 0 || return 1
      }

      json_add_kv() {
        local SOURCE="$1"
        local KEY="$2"
        local VALUE="$3"
        if [[ ! -z "$SOURCE" ]] && [[ ! -z "$KEY" ]] && [[ ! -z "$VALUE" ]]
        then
          local JSON=$(jq -n --arg KEY "$KEY" --arg VALUE "$VALUE" '{($KEY):$VALUE}')
          SOURCE=$(echo $SOURCE $JSON | jq -s add)
        fi
        echo "$SOURCE"
      }

      assemble_pipeline_output() {
        # git json
        local GIT_JSON="$(jq -n --arg GIT_REPOSITORY_URL "$GIT_REPOSITORY_URL" \
          --arg GIT_COMMIT "$GIT_COMMIT" \
          '{url:$GIT_REPOSITORY_URL,commitID:$GIT_COMMIT}')"
        GIT_JSON=$(json_add_kv "$GIT_JSON" "branch" "$GIT_BRANCH")
        GIT_JSON=$(json_add_kv "$GIT_JSON" "tag" "$GIT_TAG")
        OUTPUT_JSON="$(jq -n --argjson GIT_JSON "$GIT_JSON" '{git:$GIT_JSON}')"

        # base image
        OUTPUT_JSON=$(json_add_kv "$OUTPUT_JSON" "image" "${IMAGE_URL}")
        echo $(echo $OUTPUT_JSON | jq -cr)
      }

      assemble_body() {
        local PIPELINE_OUTPUT=$(assemble_pipeline_output)
        BODY_JSON="$(jq -n --argjson PIPELINE_OUTPUT "$PIPELINE_OUTPUT" \
          --arg PIPELINERUN_ID "$PIPELINERUN_ID" '{
            output: $PIPELINE_OUTPUT,
            pipelinerunID: $PIPELINERUN_ID | tonumber
          }'
        )"
        echo $(echo $BODY_JSON | jq -cr)
      }

      log INFO "application: $APPLICATION"
      log INFO "cluster: $CLUSTER"
      log INFO "environment: $ENVIRONMENT"

      # invoke horizon api
      do_http(){
        local METHOD="$1" URI="$2"
        local URL="$HORIZON_API_URL/${URI#/}"
        local ARGS=() DATA CONNECT_TIMEOUT MAX_TIME RETRY OUTPUT

        while ARG="$1" && shift; do
          case "$ARG" in
          "--connect-timeout")
            CONNECT_TIMEOUT="$1" && shift || break
            ARGS=("${ARGS[@]}" "--connect-timeout" "$CONNECT_TIMEOUT")
            ;;
          "-m"|"--max-time")
            MAX_TIME="$1" && shift || break
            ARGS=("${ARGS[@]}" "--max-time" "$MAX_TIME")
            ;;
          "--retry")
            RETRY="$1" && shift || break
            ARGS=("${ARGS[@]}" "--retry" "$RETRY")
            ;;
          "-d"|"--data")
            # DATA must be a json string
            DATA="$1" && DATA="$(echo "$DATA" | jq -cr)" && shift || break
            ARGS=("${ARGS[@]}" "-d" "'$DATA'")
            ;;
          "-o")
            OUTPUT="$1" && shift || break
            ;;
          *)
            shift
            ;;
          esac
        done

        CONTENT_TYPE="application/json"
        ARGS=("${ARGS[@]}" "-X" "$METHOD")
        ARGS=("${ARGS[@]}" "-H" "'Content-Type: $CONTENT_TYPE'" \
                            "-H" "'X-Horizon-JWT-Token: $TOKEN'" \
                            "-H" "'X-Request-Id: $REQUEST_ID'" )
        CMD="curl -k -sSL "${ARGS[@]}" \
                    "$([[ ! -z "$OUTPUT" ]] && echo "-o $OUTPUT")" '$URL'"
        eval "$CMD"
      }

      deploy(){
        local DEPLOY_URI="/apis/internal/v2/clusters/$CLUSTER_ID/deploy"
        local RESPONSE CODE
        local REQUEST_BODY=$(assemble_body)

        if [[ -z "$TOKEN" ]]; then
          log ERR "token for callback is empty!"; return 1
        fi

        do_http POST "$DEPLOY_URI" --connect-timeout "$CURL_CONNECT_TIME" \
          --max-time "$CURL_MAX_TIME" \
          --retry "$CURL_RETRY" \
          -d "$REQUEST_BODY" -o "$DEPLOY_RESULT"

        [[ -f "$DEPLOY_RESULT" ]] && RESPONSE="$(cat "$DEPLOY_RESULT")" || {
          log ERR "the response of deploy is empty";
          log ERR "deplay failed!"
          return 1
        }
        if ! is_json "$RESPONSE"; then
          log ERR "the response of deploy is not expected as json format, the response is: $RESPONSE"; return 1
        fi
        ERROR_CODE=$(jq -r '.errorCode//empty'<<<"$RESPONSE")
        [[ -z "$ERROR_CODE" ]] || {
          log ERR "deploy failed!"
          log ERR "response body: $RESPONSE"
          return 1
        }
        log INFO "deploy successfully!"
      }
      deploy
auth:
  dockerConfigJson: "{}"
gitRepos:
  ssh: []
  http: []
eventListener:
  replicas: 1
extraVolumeMounts: []
